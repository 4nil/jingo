#!/usr/bin/env node

/*
 * Jingo, wiki engine
 * http://github.com/claudioc/jingo
 *
 * Copyright 2014 Claudio Cicali <claudio.cicali@gmail.com>
 * Released under the MIT license
 */
var program = require('commander')
  , http    = require('http')
  , Tools   = require('./lib/tools')
  , config  = require('./lib/config')
  , http    = require('http')
  , Fs      = require('fs');

global.Git = require('./lib/gitmech');

program.version('1.0.0')
       .option('-c, --config <path>', 'Specify the config file')
       .option('-#, --hash-string <string>', 'Create an hash for a string')
       .option('-l, --local', 'Listen on localhost only')
       .option('-s, --sample-config', 'Dumps a config file template and exits')
       .parse(process.argv);

if (program.sampleConfig) {
  console.log(config.sample());
  process.exit(0);
}

if (program.hashString) {
  console.log(Tools.hashify(program.hashString));
  process.exit(0);
}

if (!program.config || !Fs.existsSync(program.config)) {
  program.help();
  process.exit(-1);
}

if (!config.load(program.config)) {
  console.log("Error: " + config.getError());
  process.exit(-1);
}

if (!config.validate()) {
  console.log("Error: " + config.getError());
  process.exit(-1);
}

var refspec = config.get("application").remote.split(/\s+/);

try {
  Git.setup(config.get("application").repository,
            config.get("application").docSubdir,
            refspec);
} catch(e) {
  console.log(e.message)
  program.help()
  process.exit(-1);
}

var app = require("./lib/app").initialize(config);

var listenAddr = process.env.NW_ADDR || "";
if (config.get("server").localOnly) {
  listenAddr = "localhost";
}

http.createServer(app).listen(config.get("server").port, listenAddr, function() {
  console.log((new Date()) + " - Jingo%sserver v%s listening on port %s", config.get("server").localOnly ? " (local) " : " ", program.version(), config.get("server").port);
});

if (config.get("application").pushInterval && refspec.length > 0) {
  setInterval(function() {
    Git.pull(function(err) {
      if (err) {
        console.log("Error: " + err);
      } else {
        Git.push(function(err) {
          if (err) {
            console.log("Error: " + err);
          }
        });
      }
    });
  }, config.get("application").pushInterval * 1000);
}
