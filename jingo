#!/usr/bin/env node

/*
 * Jingo, wiki engine
 * http://github.com/claudioc/jingo
 *
 * Copyright 2014 Claudio Cicali <claudio.cicali@gmail.com>
 * Released under the MIT license
 */
var program = require('commander')
  , http    = require('http')
  , Tools   = require('./lib/tools')
  , config  = require('./lib/config')
  , http    = require('http')
  , Fs      = require('fs');

global.Git = require('./lib/gitmech');

program.version('1.0.0')
       .option('-c, --config <path>', 'Specify the config file')
       .option('-#, --hash-string <string>', 'Create an hash for a string')
       .option('-l, --local', 'Listen on localhost only')
       .option('-s, --sample-config', 'Dumps a config file template and exits')
       .parse(process.argv);

if (program.sampleConfig) {
  console.log(config.sample());
  process.exit(0);
}

if (program.hashString) {
  console.log(Tools.hashify(program.hashString));
  process.exit(0);
}

if (!program.config || !Fs.existsSync(program.config)) {
  program.help();
  process.exit(-1);
}

if (!config.load(program.config)) {
  console.log("Error: a problem exists in the config file. Cannot continue.");
  process.exit(-1);
}

var auth = config.get("authentication", { google: { enabled: true }, alone: { enabled: false } });

auth.google = auth.google || {enabled: false};
auth.alone  = auth.alone  || {enabled: false};

if ( !auth.google.enabled && !auth.alone.enabled ) {
  console.log("Error: no authentication method provided. Cannot continue.");
  process.exit(-1);
}

if (auth.google.enabled && (!auth.google.clientId || !auth.google.clientSecret)) {
  console.log("Error: invalid or missing authentication credentials for Google (clientId and/or clientSecret).");
  process.exit(-1);
}

try {
  Git.setup(config.get("application.repository"), config.get("application.docSubdir", ""));
} catch(e) {
  console.log(e.message)
  program.help()
  process.exit(-1);
}

var app = require("./lib/app").initialize(config, auth);

var listenAddr = process.env.NW_ADDR || "";
if (config.get("server.localOnly")) {
  listenAddr = "localhost";
}

http.createServer(app).listen(app.locals.port, listenAddr, function() {
  console.log((new Date()) + " - Jingo%sserver v%s listening on port %s", config.get("server.localOnly") ? " (local) " : " ", program.version(), app.locals.port);
});
